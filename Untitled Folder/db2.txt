CREATE TABLE users(
    user_id number(10) NOT NULL PRIMARY KEY,
    first_name varchar2(150),
    last_name varchar2(150),
    phone varchar2(20),
    email varchar2(150),
    password varchar2(150)
);

CREATE TABLE log_reports(
    log_id number(10) NOT NULL PRIMARY KEY,
    user_id number(10) DEFAULT 1,
    FOREIGN KEY(user_id) REFERENCES users(user_id),
    log_date DATE,
    event varchar2(250)
);

drop table queries;
drop table cars;
CREATE TABLE cars (
    car_id number(10) NOT NULL PRIMARY KEY,
    user_id number(10) DEFAULT 1,
    query_id number(10),
    city varchar2(150),
    in_market NUMBER(1,0),
    FOREIGN KEY(user_id) REFERENCES users(user_id),
    FOREIGN KEY(query_id) REFERENCES queries(query_id)
)


CREATE TABLE inMarket(
    post_id number(10) NOT NULL PRIMARY KEY,
    car_id number(10) DEFAULT 1,
    post_name varchar2(100) NOT NULL,
    post_description varchar2(500),
    user_id number(10),
    views number(30),
    added_to_wishlist number(10),
    created_date DATE,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (car_id) REFERENCES cars(car_id)
)

CREATE TABLE wishlist(
    user_id number(10) DEFAULT 1,
    post_id number(10) NOT NULL,
    created_date date,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (post_id) REFERENCES inMarket(post_id)
)

CREATE TABLE comments(
    comment_id number(10) NOT NULL PRIMARY KEY,
    post_id number(10),
    user_id number(10) DEFAULT 1,
    comments_content varchar(500),
    is_read NUMBER(1,0),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (post_id) REFERENCES inMarket(post_id)
)

CREATE TABLE replies(
    reply_id number(10) NOT NULL PRIMARY KEY,
    comment_id number(10), 
    user_id number(10) DEFAULT 1,
    comment_content varchar2(500),
    is_read NUMBER(1,0),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (comment_id) REFERENCES comments(comment_id)
)

CREATE TABLE prediction_feedback(
    user_id number(10) DEFAULT 1,
    post_id number(10) NOT NULL ,
    created_date date,
    rate_of_prediction number(10),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (post_id) REFERENCES inMarket(post_id)
)

CREATE TABLE photos(
    post_id number(10) NOT NULL,
    image BLOB,
    FOREIGN KEY (post_id) REFERENCES inMarket(post_id)
)


-- created_date

-- PL/SQL

-- Package DateTransform
CREATE OR REPLACE PACKAGE dateTransform AS
    FUNCTION getCurrentYear(current_date date) return VARCHAR2;
    FUNCTION getCurrentMonth(current_date date) return VARCHAR2;
    FUNCTION getCurrentDay(current_date date) return VARCHAR2;
    FUNCTION getCurrentHour(current_date date) return VARCHAR2;
    FUNCTION getCurrentMinutes(current_date date) return VARCHAR2;
    FUNCTION getCurrentSeconds(current_date date) return VARCHAR2;
END dateTransform;

CREATE OR REPLACE PACKAGE BODY dateTransform AS
    FUNCTION getCurrentYear(current_date date) 
    return VARCHAR2 AS 
        currentYear varchar2;
    BEGIN
    -- Almas
        return 0; 
    END;
    
    FUNCTION getCurrentMonth(current_date date) 
    return VARCHAR2 AS 
        currentYear varchar2;
    BEGIN
        
    END;
    
    FUNCTION getCurrentDay(current_date date)
    return VARCHAR2 AS 
        currentYear varchar2;
    BEGIN
        
    END;
    FUNCTION getCurrentHour(current_date date)
    return VARCHAR2 AS 
        currentYear varchar2;
    BEGIN
        
    END;
    FUNCTION getCurrentMinutes(current_date date)
    return VARCHAR2 AS 
        currentYear varchar2;
    BEGIN
        
    END;
    FUNCTION getCurrentSeconds(current_date date)
    return VARCHAR2 AS 
        currentYear varchar2;
    BEGIN
        
    END;

end dateTransform;


CREATE OR REPLACE PACKAGE setters AS
    PROCEDURE addQuery(p_name varchar2,p_year number, p_shell varchar2, p_mileage number, p_transmission varchar2, p_rudder varchar2, p_color varchar2, p_gear varchar2, p_c_clear varchar2, p_typeengine varchar2, p_price number);
    -- Almas Part 
    PROCEDURE addCar(p_user_id number, p_query_id number, p_city varchar2, p_in_market number);
    
    PROCEDURE addToMarket(car_id number, post_name varchar2, post_description varchar2, user_id number, views number, added_to_wishlist number);

    PROCEDURE addComment(post_id number, user_id number, comment_content varchar2, is_read number);
    
    PROCEDURE addReply (comment_id number, user_id number, comment_content varchar2, is_read number);
    
    PROCEDURE addWishlist(user_id number , post_id number);
    
    PROCEDURE addLog(user_id number, log_date DATE, event varchar2);
    
    PROCEDURE addFeedback(user_id number, post_id number, rate_of_predict number);
end setters;

CREATE OR REPLACE BODY setters AS
    -- Insert query
    CREATE REPLACE PROCEDURE addQuery
    (p_name varchar2,p_year number, p_shell varchar2, p_mileage number, p_transmission varchar2, p_rudder varchar2, p_color varchar2, p_gear varchar2, p_c_clear varchar2, p_typeengine varchar2, p_price number) 
    IS
    BEGIN
    -- QUestion should in queries be CITY?
        INSERT INTO queries(name, year, shell, volume, mileage, transmission, rudder, color, gear, customscleared, typeengine, price) 
        VALUES(p_name, p_year, p_shell, p_mileage, p_transmission, p_rudder, p_color, p_gear, p_c_clear, p_typeengine, p_price);
        COMMIT;
    END;
    -- Inser car
    CREATE REPLACE PROCEDURE addCar
    (p_user_id number, p_query_id number, p_city varchar2, p_in_market number)
    IS
    BEGIN
        INSERT INTO cars(user_id, query_id, shell, city, in_market) 
        VALUES(p_user_id, p_query_id, p_shell, p_city, p_in_market);
        COMMIT;
    END;
    -- Insert to market
    CREATE REPLACE PROCEDURE addToMarket
    (p_car_id number, p_post_name varchar2, p_post_description varchar2, p_user_id number, p_views number, p_added_to_wishlist number)
    IS
    BEGIN
        INSERT INTO inMarket(car_id number, post_name varchar2, post_description varchar2, user_id number, views number, added_to_wishlist number) 
        VALUES(p_car_id number, p_post_name varchar2, p_post_description varchar2, p_user_id number, p_views number, p_added_to_wishlist number);
        COMMIT;
    END;
    -- Almas
    
end setters;


-- Need to add niggers (they will invoked before insert and increment id automaticaly with sequences
-- Transaction
-- Cursors
-- 




drop table test1;
INSERT INTO test1(test1) values(1);
INSERT INTO test2(test2) VALUES (3);
INSERT INTO test2(test2) VALUES (4);

select * from test2;